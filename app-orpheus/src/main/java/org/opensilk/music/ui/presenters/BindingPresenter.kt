package org.opensilk.music.ui.presenters

import android.content.Context
import android.databinding.DataBindingUtil
import android.databinding.ViewDataBinding
import android.os.Bundle
import android.support.annotation.LayoutRes
import android.support.v7.app.AppCompatActivity
import mortar.MortarScope
import mortar.Presenter
import mortar.bundler.BundleService
import org.opensilk.common.lifecycle.LifecycleService
import org.opensilk.common.lifecycle.getLifecycleService

/**
 * in kapt dagger2 and databinding dont interact well so using
 * generics for the presenter doest work as the classes generated by
 * databinding arent available when dagger needs them.
 *
 * so we use the base ViewDataBinding class and manually cast in subclasses
 *
 * Created by drew on 6/29/16.
 */
open class BindingPresenter(): Presenter<android.databinding.ViewDataBinding>() {

    override fun extractBundleService(view: ViewDataBinding): BundleService? {
        return BundleService.getBundleService(view.root.context)
    }

    val context: Context?
        get() = view?.root?.context

    protected lateinit var lifecycleService: LifecycleService

    override fun onEnterScope(scope: MortarScope?) {
        super.onEnterScope(scope)
        lifecycleService = getLifecycleService(scope!!)
    }
}

fun <T : ViewDataBinding> AppCompatActivity.createBinding(@LayoutRes layout: Int): Lazy<T> {
    return lazy {
        DataBindingUtil.setContentView<T>(this, layout)
    }
}